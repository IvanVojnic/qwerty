// Code generated by mockery v2.18.0. DO NOT EDIT.

package handler

/*
import (
	models "EFpractic2/models"
	context "context"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockAuthorization is an autogenerated mock type for the Authorization type
type MockAuthorization struct {
	mock.Mock
}

// CreateUserVerified provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockAuthorization) CreateUserVerified(_a0 context.Context, _a1 *models.UserAuth, _a2 string) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.UserAuth, string) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserVerified provides a mock function with given fields: _a0, _a1
func (_m *MockAuthorization) GetUserVerified(_a0 context.Context, _a1 uuid.UUID) (models.UserAuth, error) {
	ret := _m.Called(_a0, _a1)

	var r0 models.UserAuth
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) models.UserAuth); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.UserAuth)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignInUser provides a mock function with given fields: _a0, _a1
func (_m *MockAuthorization) SignInUser(_a0 context.Context, _a1 *models.UserAuth) (bool, error) {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *models.UserAuth) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.UserAuth) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockAuthorization interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockAuthorization creates a new instance of MockAuthorization. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockAuthorization(t mockConstructorTestingTNewMockAuthorization) *MockAuthorization {
	mock := &MockAuthorization{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}*/
